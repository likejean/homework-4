{"version":3,"sources":["components/Range.js","components/Counter.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["props","id","className","type","name","value","rangeLimits","lower","onChange","handleRangeChange","disabled","fieldStatus","errors","upper","large","node","style","margin","waves","onClick","handleSubmit","useState","counter","setCounter","handleButtonClick","e","step","parseInt","target","getAttribute","buttonMap","map","el","key","setRangeLimits","setButtonMap","error","setError","tempUpper","tempLower","isNaN","Number","isInteger","range","arrRight","arrLeft","i","push","console","log","preventDefault","Fragment","Range","Counter","App","Main","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4db8d0d4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'react-materialize';\r\n\r\nexport default props => {\r\n    return (\r\n        <div id=\"inputs\" className='container'>\r\n            <label>Lower Limit: </label>\r\n            <input\r\n                className='input-fields'\r\n                type=\"text\"\r\n                name=\"lower\"\r\n                value={ props.rangeLimits.lower }\r\n                onChange={ props.handleRangeChange }\r\n                disabled = { props.rangeLimits.fieldStatus.lower }\r\n            />\r\n            {<span className='error'>{props.rangeLimits.errors.lower}</span>}<br></br>\r\n            <label>Upper Limit: </label>\r\n            <input\r\n                className='input-fields'\r\n                type=\"text\"\r\n                name=\"upper\"\r\n                value={ props.rangeLimits.upper }\r\n                onChange={ props.handleRangeChange }\r\n                disabled = { props.rangeLimits.fieldStatus.upper }\r\n            />\r\n            {<span className='error'>{props.rangeLimits.errors.upper}</span>}<br></br>\r\n            <Button\r\n                large\r\n                node=\"a\"\r\n                style={{\r\n                    margin: 5\r\n                }}\r\n                waves=\"light\"\r\n                type=\"submit\"\r\n                onClick={ props.handleSubmit }\r\n            >SUBMIT</Button>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport {Button} from 'react-materialize';\r\n\r\n\r\nexport default props => {\r\n    const [counter, setCounter] = useState(0);\r\n\r\n    const handleButtonClick = e => {\r\n        let step = parseInt(e.target.getAttribute('step'));\r\n        setCounter(counter + step);\r\n\r\n    }\r\n    const handleResetClick = e => setCounter(0);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row counter\">\r\n                {props.buttonMap.lower.map(el => <Button className=\"col-5 z-depth-3\" onClick={handleButtonClick} step={el}\r\n                                          name=\"subtract\" key={el}>{el}</Button>)}\r\n                <div className=\"counter-container row\">\r\n                    <h2 className=\"col-2 counter-label\">Counter: {counter}</h2>\r\n                    <Button\r\n                        id=\"reset-button\"\r\n                        large\r\n                        node=\"a\"\r\n                        style={{\r\n                            margin: 5\r\n                        }}\r\n                        waves=\"light\"\r\n                        type=\"submit\"\r\n                        onClick={handleResetClick}\r\n                    >RESET</Button>\r\n                </div>\r\n                {props.buttonMap.upper.map(el => <Button className=\"col-5 z-depth-3\" onClick={handleButtonClick} step={el}\r\n                                          name=\"add\" key={el}>{el}</Button>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport Range from './Range';\r\nimport Counter from './Counter';\r\n\r\nexport default () => {\r\n    const [ rangeLimits, setRangeLimits ] = useState({\r\n            lower : 1,\r\n            upper : 1,\r\n            errors: {\r\n                lower: \"\",\r\n                upper: \"\"\r\n            },\r\n            fieldStatus: {\r\n                upper: false,\r\n                lower: false\r\n            }\r\n        });\r\n    const [ buttonMap, setButtonMap ] = useState({lower: [-1], upper: [1]});\r\n    const [ error, setError ] = useState('');\r\n\r\n    const handleRangeChange = e => {\r\n        const { name, value } = e.target;\r\n        let errors = rangeLimits.errors;\r\n        let fieldStatus = rangeLimits.fieldStatus;\r\n        setRangeLimits({ ...rangeLimits, [ name ]: value });\r\n        let tempUpper = rangeLimits[ \"upper\" ];\r\n        let tempLower = rangeLimits[ \"lower\" ];\r\n\r\n        //User Error Validation\r\n\r\n        switch (name) {\r\n            case 'upper':\r\n                errors.upper =\r\n                    isNaN(value) || Number.isInteger(value)\r\n                    ? 'ERROR! Input must be an INTEGER'\r\n                    : parseInt(value) >= 10\r\n                        ? 'ERROR! Must be less than 10'\r\n                        : parseInt(value) < tempLower\r\n                            ? 'ERROR! Upper Limit Must be GREATER than Lower Limit'\r\n                            : ''\r\n                ;\r\n                fieldStatus.lower =\r\n                        parseInt(value) < tempLower\r\n                        ? true\r\n                        : false\r\n                ;\r\n\r\n                break;\r\n            case 'lower':\r\n                errors.lower =\r\n                    isNaN(value) || Number.isInteger(value)\r\n                    ? 'ERROR! Input must be an INTEGER'\r\n                    : parseInt(value) < 1\r\n                        ? 'ERROR! Must be greater than zero'\r\n                        : parseInt(value) > tempUpper\r\n                            ? 'ERROR! Lower Limit Must be Less than Upper Limit'\r\n                            : ''\r\n                ;\r\n                fieldStatus.upper =\r\n                    parseInt(value) > tempUpper\r\n                        ? true\r\n                        : false\r\n                ;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const handleSubmit = e => {\r\n        let range = parseInt(rangeLimits.upper) - parseInt(rangeLimits.lower);\r\n        let arrRight = [];\r\n        let arrLeft = [];\r\n        for (let i = parseInt(rangeLimits.lower); i <= parseInt(rangeLimits.lower) + range; i++){\r\n            arrRight.push(i);\r\n            console.log(arrRight)\r\n            arrLeft.push(-(parseInt(rangeLimits.lower) + parseInt(rangeLimits.lower) + range - i));\r\n            console.log(arrLeft);\r\n        }\r\n        range >= 0 ?\r\n            setButtonMap({lower: arrLeft, upper: arrRight})\r\n            :\r\n            setError('Invalid Inputs! Check if Upper Limit is Greater than Lower Limit');\r\n        e.preventDefault();\r\n    }\r\n    const props = {\r\n        rangeLimits: rangeLimits,\r\n        buttonMap: buttonMap,\r\n        error: error,\r\n        handleRangeChange: handleRangeChange,\r\n        handleSubmit: handleSubmit\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Range {...props}/>\r\n            <Counter {...props}/>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\nimport Main from './components/Main';\n\nimport './App.css';\n\nfunction App() {\n    return (\n        <Main/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}